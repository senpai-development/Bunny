# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, goverfl0w
# This file is distributed under the same license as the
# discord-interactions package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: discord-interactions 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-25 12:17-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../components.rst:2
msgid "How to use components"
msgstr ""

#: ../../components.rst:5
msgid ""
"So you've seen the new fancy buttons and want to give them a try, but "
"dont know where to start. No problem!"
msgstr ""

#: ../../components.rst:7
msgid ""
"First lets cover the basics. Discord messages can have *components*, such"
" as buttons, dropdowns etc. These components sit in whats called an "
"\"action row\". An action row can hold 5 components at a time. Your "
"message can have 5 action rows, so thats a total of 25 components!"
msgstr ""

#: ../../components.rst:10
msgid "Sending some components"
msgstr ""

#: ../../components.rst:12
msgid "This will work in both slash commands, and discord.py commands"
msgstr ""

#: ../../components.rst:14
msgid ""
"First we need to create some buttons, lets put them in a list for now. "
"We'll use :meth:`create_button() <discord_slash.utils.manage_components>`"
" to create a green button"
msgstr ""

#: ../../components.rst:28
msgid ""
"So we have a button, but where do we use it. Let's create an action row "
"with :func:`create_actionrow() <discord_slash.utils.manage_components>` "
"and put our buttons in it"
msgstr ""

#: ../../components.rst:35
msgid ""
"Fantastic, we now have an action row with a green button in it, now lets "
"get it sent in discord"
msgstr ""

#: ../../components.rst:42
msgid "And to bring it all together, you could use this:"
msgstr ""

#: ../../components.rst:54
msgid ""
"Now if you've followed along, you have a green button in discord! But "
"theres a problem, whenever you click it you see that the ``interaction "
"failed``. Why is that? Well, in Discord, clicking buttons and using slash"
" commands are called ``interactions``, and Discord doesn't know if we've "
"received them or not unless we tell Discord. So how do we do that?"
msgstr ""

#: ../../components.rst:58
msgid "Responding to interactions"
msgstr ""

#: ../../components.rst:60
msgid ""
"When responding, you have 3 choices in how you handle interactions. You "
"can either wait for them in the command itself, or listen for them in a "
"global event handler (similar to :func:`on_slash_command_error`), or "
"register async function as component callback."
msgstr ""

#: ../../components.rst:63
msgid "Wait_for"
msgstr ""

#: ../../components.rst:65
msgid ""
"Lets go through the most common method first, responding in the command "
"itself. We simply need to :func:`wait_for` the event, just like you do "
"for reactions. For this we're going to use :func:`wait_for_component() "
"<discord_slash.utils.manage_components>`, and we're going to only wait "
"for events from the action row we just sent. This method will return a "
":class:`ComponentContext <discord_slash.context.ComponentContext>` object"
" that we can use to respond. For this example, we'll just edit the "
"original message (:meth:`edit_origin() "
"<discord_slash.context.ComponentContext.edit_origin>`, uses same logic as"
" :func:`edit()`)"
msgstr ""

#: ../../components.rst:77
msgid ""
"It's worth being aware that if you handle the event in the command "
"itself, it will not persist reboots. As such when you restart the bot, "
"the interaction will fail"
msgstr ""

#: ../../components.rst:80
msgid "Global event handler"
msgstr ""

#: ../../components.rst:82
msgid ""
"Next we'll go over the alternative, a global event handler. This works "
"just the same as :func:`on_slash_command_error` or `on_ready`. But note "
"that this code will be triggered on any components interaction."
msgstr ""

#: ../../components.rst:92
msgid "Component callbacks"
msgstr ""

#: ../../components.rst:94
msgid ""
"There is one more method - making a function that'll be component "
"callback - triggered when components in a specified message or specific "
"``custom_id`` are used. Let's register our callback function via "
"decorator :meth:`component_callback() "
"<discord_slash.client.SlashCommand.component_callback>`, in similar ways "
"to slash commands."
msgstr ""

#: ../../components.rst:103
msgid ""
"In this example, :func:`hello` will be triggered when you receive "
"interaction event from a component with a `custom_id` set to `\"hello\"`."
" Just like slash commands, the callback's `custom_id` defaults to the "
"function name. You can also register such callbacks in cogs using "
":func:`cog_component() <discord_slash.cog_ext>` Additionally, component "
"callbacks can be dynamically added, removed or edited - see "
":class:`SlashCommand <discord_slash.client.SlashCommand>`"
msgstr ""

#: ../../components.rst:108
msgid "But [writer], I dont want to edit the message"
msgstr ""

#: ../../components.rst:110
msgid ""
"Well lucky for you, you don't have to. You can either respond silently, "
"with a thinking animation, or send a whole new message. Take a look here:"
" :class:`ComponentContext <discord_slash.context.ComponentContext>`"
msgstr ""

#: ../../components.rst:113
msgid "How do I know which button was pressed?"
msgstr ""

#: ../../components.rst:115
msgid ""
"Each button gets a ``custom_id`` (which is always a string), this is a "
"unique identifier of which button is being pressed. You can specify what "
"the ID is when you define your button, if you don't; a random one will be"
" generated. When handling the event, simply check the custom_id, and "
"handle accordingly."
msgstr ""

#: ../../components.rst:118
msgid "What about selects / Dropdowns?"
msgstr ""

#: ../../components.rst:120
msgid ""
"Yep we support those too. You use them much the same as buttons. You can "
"only have 1 select per action row, but each select can have up to 25 "
"options in it!"
msgstr ""

#: ../../components.rst:144
msgid ""
"Additionally, you can pass ``description`` as a keyword-argument for "
"``create_select_option()`` if you so wish."
msgstr ""
