# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, goverfl0w
# This file is distributed under the same license as the
# discord-interactions package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: discord-interactions 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-25 12:17-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../gettingstarted.rst:2
msgid "Getting Started"
msgstr ""

#: ../../gettingstarted.rst:5
msgid "Where do we start?"
msgstr ""

#: ../../gettingstarted.rst:7
msgid ""
"Before we begin getting started on everything else, it is recommended to "
"check out the `quickstart`_ page first to get a basic grip on making "
"slash commands for your bot."
msgstr ""

#: ../../gettingstarted.rst:12
msgid "Making a slash command."
msgstr ""

#: ../../gettingstarted.rst:15
msgid "The basics."
msgstr ""

#: ../../gettingstarted.rst:17
msgid ""
"First, let's explain by how commands are parsed through the Discord Bot "
"API."
msgstr ""

#: ../../gettingstarted.rst:19
msgid ""
"As you may know, Discord relies a lot on the interaction of HTTP Requests"
" and JSON tables. As is with the case here, commands are the exact same "
"way with having JSON tables to structure the design of it for Discord to "
"understand. We can apply this information likewise with how slash "
"commands are to be designed in the Python code. Below attached is from "
"the *Discord Developer Portal* on Slash Commands for showing how they are"
" designed."
msgstr ""

#: ../../gettingstarted.rst:27 ../../gettingstarted.rst:75
#: ../../gettingstarted.rst:183 ../../gettingstarted.rst:241
#: ../../gettingstarted.rst:329 ../../gettingstarted.rst:411
msgid "**Field**"
msgstr ""

#: ../../gettingstarted.rst:27 ../../gettingstarted.rst:75
#: ../../gettingstarted.rst:183 ../../gettingstarted.rst:241
#: ../../gettingstarted.rst:329 ../../gettingstarted.rst:411
msgid "**Type**"
msgstr ""

#: ../../gettingstarted.rst:27 ../../gettingstarted.rst:75
#: ../../gettingstarted.rst:183 ../../gettingstarted.rst:241
#: ../../gettingstarted.rst:329 ../../gettingstarted.rst:411
msgid "**Description**"
msgstr ""

#: ../../gettingstarted.rst:29 ../../gettingstarted.rst:79
#: ../../gettingstarted.rst:185 ../../gettingstarted.rst:331
msgid "name"
msgstr ""

#: ../../gettingstarted.rst:29 ../../gettingstarted.rst:31
#: ../../gettingstarted.rst:79 ../../gettingstarted.rst:81
#: ../../gettingstarted.rst:185 ../../gettingstarted.rst:331
#: ../../gettingstarted.rst:413 ../../gettingstarted.rst:415
#: ../../gettingstarted.rst:417 ../../gettingstarted.rst:419
msgid "string"
msgstr ""

#: ../../gettingstarted.rst:29 ../../gettingstarted.rst:79
msgid "1-32 character name matching ``^[\\w-]{1,32}$``."
msgstr ""

#: ../../gettingstarted.rst:31 ../../gettingstarted.rst:81
msgid "description"
msgstr ""

#: ../../gettingstarted.rst:31 ../../gettingstarted.rst:81
msgid "1-100 character description."
msgstr ""

#: ../../gettingstarted.rst:33 ../../gettingstarted.rst:89
msgid "options?"
msgstr ""

#: ../../gettingstarted.rst:33 ../../gettingstarted.rst:89
msgid "array of `ApplicationCommandOption`_"
msgstr ""

#: ../../gettingstarted.rst:33 ../../gettingstarted.rst:89
msgid ""
"if the option is a subcommand or subcommand group type, this nested "
"options will be the parameters."
msgstr ""

#: ../../gettingstarted.rst:36
msgid ""
"This table shows us the way that Discord handles the structure of "
"commands for slash commands through their Bot API. For visualization "
"purposes, we'll quickly make a JSON example (although we won't be using "
"it) in order to explain how this works:"
msgstr ""

#: ../../gettingstarted.rst:48
msgid ""
"Now that we have a basic understanding of how the JSON table works, we "
"can take this knowledge and convert it into a decorator method for the "
"Python code as shown below:"
msgstr ""

#: ../../gettingstarted.rst:59
msgid ""
"Now that we've gone over how Discord handles the declaration of slash "
"commands through their Bot API, let's go over what some of the other "
"things mean within the *logical* part of our code, the command function:"
msgstr ""

#: ../../gettingstarted.rst:65
msgid "Giving some options for variety."
msgstr ""

#: ../../gettingstarted.rst:67
msgid ""
"The next thing that we will begin to talk about is the implementation of "
"options, otherwise well-known as \"arguments\" in discord.py commands."
msgstr ""

#: ../../gettingstarted.rst:70
msgid ""
"The JSON structure of options are designed up to be similar to the same "
"premise of how a slash command is declared. Below is the given table of "
"how an option JSON would appear as:"
msgstr ""

#: ../../gettingstarted.rst:77 ../../gettingstarted.rst:245
#: ../../gettingstarted.rst:333
msgid "type"
msgstr ""

#: ../../gettingstarted.rst:77 ../../gettingstarted.rst:243
#: ../../gettingstarted.rst:245 ../../gettingstarted.rst:333
msgid "int"
msgstr ""

#: ../../gettingstarted.rst:77
msgid "value of `ApplicationCommandOptionType`_."
msgstr ""

#: ../../gettingstarted.rst:83
msgid "default?"
msgstr ""

#: ../../gettingstarted.rst:83 ../../gettingstarted.rst:85
msgid "bool"
msgstr ""

#: ../../gettingstarted.rst:83
msgid ""
"the first required option for the user to complete--only one option can "
"be default."
msgstr ""

#: ../../gettingstarted.rst:85
msgid "required?"
msgstr ""

#: ../../gettingstarted.rst:85
msgid "if the parameter is required or optional--default ``false``."
msgstr ""

#: ../../gettingstarted.rst:87
msgid "choices?"
msgstr ""

#: ../../gettingstarted.rst:87
msgid "array of `ApplicationCommandOptionChoice`_"
msgstr ""

#: ../../gettingstarted.rst:87
msgid "choices for ``string`` and ``int`` types for the user to pick from."
msgstr ""

#: ../../gettingstarted.rst:92
msgid ""
"Now we have an idea of how options are declared. With this in mind, let's"
" quickly make a JSON example in order to visualize this concept even "
"further:"
msgstr ""

#: ../../gettingstarted.rst:110
msgid ""
"While the table in the basics mentions an array in particular called "
"``ApplicationCommandOptionType``, there isn't that much of an explanation"
" on how this works. Let's put this into better laymen terms on what this "
"means with a table below showing all of these values:"
msgstr ""

#: ../../gettingstarted.rst:115 ../../gettingstarted.rst:255
#: ../../gettingstarted.rst:350
msgid "**Name**"
msgstr ""

#: ../../gettingstarted.rst:115 ../../gettingstarted.rst:255
#: ../../gettingstarted.rst:350
msgid "**Value**"
msgstr ""

#: ../../gettingstarted.rst:117
msgid "SUB_COMMAND"
msgstr ""

#: ../../gettingstarted.rst:117 ../../gettingstarted.rst:257
#: ../../gettingstarted.rst:352
msgid "1"
msgstr ""

#: ../../gettingstarted.rst:119
msgid "SUB_COMMAND_GROUP"
msgstr ""

#: ../../gettingstarted.rst:119 ../../gettingstarted.rst:259
#: ../../gettingstarted.rst:354
msgid "2"
msgstr ""

#: ../../gettingstarted.rst:121
msgid "STRING"
msgstr ""

#: ../../gettingstarted.rst:121 ../../gettingstarted.rst:356
msgid "3"
msgstr ""

#: ../../gettingstarted.rst:123
msgid "INTEGER"
msgstr ""

#: ../../gettingstarted.rst:123
msgid "4"
msgstr ""

#: ../../gettingstarted.rst:125
msgid "BOOLEAN"
msgstr ""

#: ../../gettingstarted.rst:125
msgid "5"
msgstr ""

#: ../../gettingstarted.rst:127 ../../gettingstarted.rst:354
msgid "USER"
msgstr ""

#: ../../gettingstarted.rst:127
msgid "6"
msgstr ""

#: ../../gettingstarted.rst:129
msgid "CHANNEL"
msgstr ""

#: ../../gettingstarted.rst:129
msgid "7"
msgstr ""

#: ../../gettingstarted.rst:131
msgid "ROLE"
msgstr ""

#: ../../gettingstarted.rst:131
msgid "8"
msgstr ""

#: ../../gettingstarted.rst:134
msgid ""
"The purpose of having the ``ApplicationCommandOptionType`` value passed "
"into our option JSON structure is so that we can help the Discord UI "
"understand what kind of value we're inputting here. For instance, if "
"we're wanting to put in a string response, we'll pass the ID 3 so that "
"the UI of Discord chat bar knows to format it visually this way. If we're"
" looking for a user, then we'll pass ID 6 so that it presents us with a "
"list of users in our server instead, making it easier on our lives."
msgstr ""

#: ../../gettingstarted.rst:140
msgid ""
"This is not to be confused, however, with formatting the response type "
"itself. This is merely a method so that the API wrapper can help us with "
"passing the correct type or instance variable with the arguments of the "
"command function's code."
msgstr ""

#: ../../gettingstarted.rst:144
msgid ""
"Now, we can finally visualize this by coding an example of this being "
"used in the Python code shown below."
msgstr ""

#: ../../gettingstarted.rst:163
msgid ""
"Additionally, we could also declare the type of our command's option "
"through this method shown here:"
msgstr ""

#: ../../gettingstarted.rst:174
msgid "More in the option? Give them a choice."
msgstr ""

#: ../../gettingstarted.rst:176
msgid ""
"Alas, there is also a way to give even more information to options with "
"Discord's Slash Commands: a choice. Not like something that you're given "
"at birth of when you become of legal age as an adult, we're not here to "
"give you *that* kind of life advice, but the choice of what value you "
"want your option to rather pass. Below is a table that shows the JSON "
"structure of how choices are represented for an option:"
msgstr ""

#: ../../gettingstarted.rst:185
msgid "1-32 character choice name."
msgstr ""

#: ../../gettingstarted.rst:187
msgid "value"
msgstr ""

#: ../../gettingstarted.rst:187
msgid "string or int"
msgstr ""

#: ../../gettingstarted.rst:187
msgid "value of the choice, up to 100 characters if string."
msgstr ""

#: ../../gettingstarted.rst:190
msgid ""
"This time, only 2 fields are able to be passed for this. Below is a JSON "
"example of how this would be designed:"
msgstr ""

#: ../../gettingstarted.rst:200
msgid ""
"To make it really simple, the ``name`` field is only to be used for how "
"you want the choice to be presented through Discord's UI. It's the "
"\"appearance\" of how you want your choice shown, not the actual returned"
" value of it. Hence, this is why ``value`` is the second field passed for"
" that, which can be either in the form of a string or integer. Below is "
"an implementation of this design in the Python code:"
msgstr ""

#: ../../gettingstarted.rst:233
msgid "Want to restrict access? Setup permissions!"
msgstr ""

#: ../../gettingstarted.rst:235
msgid ""
"Slash commands also support the ability to set permissions to allow only "
"certain roles and/or users to run a slash command. Permissions can be "
"applied to both global and guild based commands. They are defined per "
"guild, per top-level command (the base command for subcommands), and each"
" guild can have multiple permissions. Here is the table that shows the "
"JSON structure of how permissions are represented:"
msgstr ""

#: ../../gettingstarted.rst:243
msgid "id"
msgstr ""

#: ../../gettingstarted.rst:243
msgid ""
"Snowflake value of type specified. Represents the target to apply "
"permissions on."
msgstr ""

#: ../../gettingstarted.rst:245
msgid "An `ApplicationCommandPermissionType`_."
msgstr ""

#: ../../gettingstarted.rst:247
msgid "permission"
msgstr ""

#: ../../gettingstarted.rst:247
msgid "boolean"
msgstr ""

#: ../../gettingstarted.rst:247
msgid "``True`` to allow, ``False`` to disallow."
msgstr ""

#: ../../gettingstarted.rst:250
msgid ""
"How the type parameter works is very simple. Discord has many ids to "
"represent different things. As you can set permissions to apply for User "
"or Role, `ApplicationCommandPermissionType`_ is used. It's a number and "
"following table shows the supported id types for permissions:"
msgstr ""

#: ../../gettingstarted.rst:257
msgid "Role"
msgstr ""

#: ../../gettingstarted.rst:259
msgid "User"
msgstr ""

#: ../../gettingstarted.rst:262
msgid ""
"This is an example of how a single permission will look when represented "
"as a json object:"
msgstr ""

#: ../../gettingstarted.rst:272
msgid ""
"Now, let take a look at an example. The slash command decorator has a "
"permissions parameter where it takes in a dictionary. The key being the "
"guild id to apply permissions on, and value being the list of permissions"
" to apply. For each permission, we can use the handy "
"``create_permission`` method to build the permission json explained "
"above."
msgstr ""

#: ../../gettingstarted.rst:277
msgid ""
"In this case, we are setting 2 permissions for a guild with an id of "
"``12345678``. Firstly, we are allowing role with id ``99999999`` and "
"disallowing user with id ``88888888`` from running the slash command."
msgstr ""

#: ../../gettingstarted.rst:296
msgid ""
"Alternatively, you can use the ``@slash.permission`` decorator to define "
"your guild permissions for the command as show in the following example:"
msgstr ""

#: ../../gettingstarted.rst:315
msgid "But what about buttons?"
msgstr ""

#: ../../gettingstarted.rst:316
msgid ""
"This library supports components (buttons, actionrows, selects, etc.). "
"Take a look here: `components`_."
msgstr ""

#: ../../gettingstarted.rst:319
msgid "Making a message/menu command."
msgstr ""

#: ../../gettingstarted.rst:320
msgid ""
"Lucky for you, this library has recently added support for context menus!"
" Let's take a look into how they're designed."
msgstr ""

#: ../../gettingstarted.rst:322
msgid ""
"Please note that the current limit for context menus with the Discord API"
" is **5.**"
msgstr ""

#: ../../gettingstarted.rst:324
msgid ""
"A menu command (context menu) is an easy way for bot developers to "
"program optionless and choiceless commands into their bot which can be "
"easily accessible by right clicking on a user and/or message present. "
"Below is a table of the supported keys and values:"
msgstr ""

#: ../../gettingstarted.rst:331
msgid "The name of the context menu command."
msgstr ""

#: ../../gettingstarted.rst:333
msgid "An `ApplicationCommandType`_."
msgstr ""

#: ../../gettingstarted.rst:336
msgid ""
"The following table below represents how it would be shown as a JSON "
"object:"
msgstr ""

#: ../../gettingstarted.rst:345
msgid ""
"The following table explains more about the ``type`` parameter being "
"passed, which there are three of: ``CHAT_INPUT``, ``USER`` and "
"``MESSAGE``. By default, the type will always be the first. This is "
"because it is a registered type that is used to process slash commands, "
"and should not be used for when you are declaring context menu commands "
"in your bot's code at all:"
msgstr ""

#: ../../gettingstarted.rst:352
msgid "CHAT_INPUT"
msgstr ""

#: ../../gettingstarted.rst:356
msgid "MESSAGE"
msgstr ""

#: ../../gettingstarted.rst:359
msgid ""
"Unlike ``manage_commands`` and ``manage_components``, you will have to "
"use a decorator for now to register them:"
msgstr ""

#: ../../gettingstarted.rst:375
msgid ""
"The ``@slash.context_menu`` decorator takes in the context type as given "
"(to either appear when you right-click on a user or when you right-click "
"on a message) as well as the name of the command, and any guild IDs if "
"given if you would like to make it applicable to only a guild. **We only "
"accept connected names** for the time being, although context menus will "
"have the ability to have spaces in their name in the future when "
"development further progresses."
msgstr ""

#: ../../gettingstarted.rst:379
msgid ""
"You are able to also use the ``@cog_ext.cog_context_menu`` path which "
"will require an import from ``cog_ext.py`` respectively, however, it is "
"worth nothing that the ``target`` kwarg for the decorator **must** be "
"brought to the very end."
msgstr ""

#: ../../gettingstarted.rst:383
msgid "Can I use components with context menus?"
msgstr ""

#: ../../gettingstarted.rst:384
msgid ""
"Of course! However, you will need to add in some additional code in order"
" for both of the separate contexts to work seamlessly. Below is the given"
" code of what will need to be changed:"
msgstr ""

#: ../../gettingstarted.rst:399
msgid "Hey, what about component/[X] listening?"
msgstr ""

#: ../../gettingstarted.rst:400
msgid ""
"The decision has been made that this will not be implemented because of "
"two reasons: context menus currently have no ability to hold any options "
"or choices, so listening for any responses would be currently pointless. "
"Additionally, component listening is already a built-in feature that does"
" not require further customized and new decorators for explicitly context"
" menus, as they're more universal."
msgstr ""

#: ../../gettingstarted.rst:405
msgid "Nested commands as subcommands."
msgstr ""

#: ../../gettingstarted.rst:406
msgid ""
"Before you get into learning how to create a subcommand, please be sure "
"to read up on the documentation above given for how slash commands are "
"made."
msgstr ""

#: ../../gettingstarted.rst:408
msgid ""
"Subcommands are way to \"nest\" your slash commands under one (or more) "
"given names, as either a \"base\" name or a \"grouping\" of an existing "
"base. When this is said, it will initially appear very confusing. Let's "
"use the table shown below as a way to introduce the new fields/properties"
" that can be applied for a slash command to become a subcommand:"
msgstr ""

#: ../../gettingstarted.rst:413
msgid "base"
msgstr ""

#: ../../gettingstarted.rst:413
msgid "The name of the subcommand \"base.\""
msgstr ""

#: ../../gettingstarted.rst:415
msgid "subcommand_group"
msgstr ""

#: ../../gettingstarted.rst:415
msgid "The name for the group of commands under the \"base.\" Field is optional."
msgstr ""

#: ../../gettingstarted.rst:417
msgid "base_description"
msgstr ""

#: ../../gettingstarted.rst:417
msgid ""
"The description when the base is active in the UX chat bar. Defaults to "
"``None``."
msgstr ""

#: ../../gettingstarted.rst:419
msgid "subcommand_group_description"
msgstr ""

#: ../../gettingstarted.rst:419
msgid ""
"The name for the group of commands under the \"base.\" Defaults to "
"``None``."
msgstr ""

#: ../../gettingstarted.rst:423
msgid "Handling my errors."
msgstr ""

#: ../../gettingstarted.rst:425
msgid ""
"Thankfully, we try to make a majority of our error handling very simple. "
"If you would like to learn more about how to handle your errors, please "
"refer to our `errors`_ page. If you are looking for listener events, then"
" check our `listeners`_ page instead."
msgstr ""

#: ../../gettingstarted.rst:428
msgid ""
"As a side-note, as of version 3.0, message/menu commands (context menus) "
"are handled under the ``on_slash_command_error`` event."
msgstr ""
